// Generated by CoffeeScript 1.6.3
(function() {
  var I18nMiddleware, async, fs, i18n, i18nMiddleware, mkdirp, path, url, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('graceful-fs');

  url = require('url');

  i18n = require('i18n');

  _ = require('underscore');

  async = require('async');

  mkdirp = require('mkdirp');

  I18nMiddleware = (function() {
    function I18nMiddleware(options) {
      var f, langFiles;
      this.options = _.extend({
        defaultLocale: 'en',
        cookie: 'lang',
        directory: "" + (process.cwd()) + "/src/locales",
        src: "" + (process.cwd()) + "/src",
        tmp: "" + (process.cwd()) + "/tmp/i18n",
        grepExts: /(\.js|\.html)$/,
        testExts: ['.coffee', '.html'],
        pattern: /\{\{__([\s\S]+?)\}\}/g,
        force: false,
        updateFiles: false
      }, options || {});
      if (!this.options.locales) {
        try {
          langFiles = fs.readdirSync(this.options.directory);
          this.options.locales = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = langFiles.length; _i < _len; _i++) {
              f = langFiles[_i];
              _results.push(f.slice(0, +(f.length - path.extname(f).length - 1) + 1 || 9e9));
            }
            return _results;
          })();
        } catch (_error) {
          this.options.locales = [];
        }
      }
      i18n.configure(this.options);
      this.i18n = i18n;
    }

    I18nMiddleware.prototype.compile = function(ops, callback) {
      var options, _compile;
      if (callback == null) {
        callback = function() {};
      }
      options = this.options;
      ops = ops;
      _compile = function() {
        return fs.readFile(ops.filePath, 'utf8', function(err, content) {
          if (err != null) {
            return callback();
          }
          content = content.replace(options.pattern || /$^/, function(m, code) {
            var result;
            result = i18n.__({
              phrase: code,
              locale: ops.lang
            });
            return result || code;
          });
          return mkdirp(path.dirname(ops.destPath), '0755', function(err) {
            if (err != null) {
              return callback();
            }
            return fs.writeFile(ops.destPath, content, 'utf8', callback);
          });
        });
      };
      if (options.force) {
        return _compile();
      }
      return fs.stat(ops.filePath, function(err, srcStat) {
        if (err != null) {
          return callback();
        }
        return fs.stat(ops.destPath, function(err, destStat) {
          if (err) {
            if (err.code === 'ENOENT') {
              return _compile();
            } else {
              return callback();
            }
          } else {
            if (srcStat.mtime > destStat.mtime) {
              return _compile();
            } else {
              return callback();
            }
          }
        });
      });
    };

    I18nMiddleware.prototype.middleware = function() {
      var options, _middleware,
        _this = this;
      options = this.options;
      _middleware = function(req, res, next) {
        return i18n.init(req, res, function() {
          var lang, matches, pathname, tmpPath;
          lang = i18n.getLocale(req);
          lang = __indexOf.call(options.locales, lang) >= 0 ? lang : 'en';
          i18n.setLocale(req, lang);
          pathname = url.parse(req.url).pathname;
          tmpPath = "" + options.tmp + "/" + lang;
          if (matches = pathname.match(options.grepExts)) {
            return async.each(options.testExts, (function(_ext, _next) {
              var destPath, filePath, fileRelPath, _options;
              fileRelPath = pathname.replace(options.grepExts, _ext);
              filePath = path.join(options.src, fileRelPath);
              destPath = "" + options.tmp + "/" + lang + fileRelPath;
              _options = {
                filePath: filePath,
                destPath: destPath,
                lang: lang
              };
              return _this.compile(_options, _next);
            }), function(err) {
              return next();
            });
          } else {
            return next();
          }
        });
      };
      return _middleware;
    };

    return I18nMiddleware;

  })();

  i18nMiddleware = function(options) {
    var middleware;
    middleware = new I18nMiddleware(options);
    this.options = middleware.options;
    return middleware.middleware();
  };

  i18nMiddleware.I18nMiddleware = I18nMiddleware;

  i18nMiddleware.version = '0.0.1';

  module.exports = i18nMiddleware;

}).call(this);
