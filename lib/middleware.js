// Generated by CoffeeScript 1.6.3
(function() {
  var I18nMiddleware, async, fs, i18n, i18nMiddleware, mkdirp, path, url, _;

  path = require('path');

  fs = require('fs');

  url = require('url');

  i18n = require('i18n');

  _ = require('underscore');

  async = require('async');

  mkdirp = require('mkdirp');

  I18nMiddleware = (function() {
    function I18nMiddleware(options) {
      this.options = _.extend({
        locales: ['en'],
        defaultLocale: 'en',
        cookie: 'lang',
        directory: "" + (process.cwd()) + "/src/locales",
        src: "" + (process.cwd()) + "/src",
        tmp: "" + (process.cwd()) + "/.locales",
        grepExts: /(\.js|\.html)$/,
        testExts: ['.coffee', '.html'],
        pattern: /\{\{__([\s\S]+?)\}\}/g,
        force: false
      }, options || {});
      i18n.configure(this.options);
    }

    I18nMiddleware.prototype.middleware = function() {
      var options, _middleware,
        _this = this;
      options = this.options;
      _middleware = function(req, res, next) {
        return i18n.init(req, res, function() {
          var lang, matches, pathname, tmpPath, _decorator;
          lang = i18n.getLocale(req);
          pathname = url.parse(req.url).pathname;
          tmpPath = "" + options.tmp + "/" + lang;
          if (matches = pathname.match(options.grepExts)) {
            _decorator = function(ext) {
              switch (ext) {
                case '.js':
                case '.coffee':
                  return function(code) {
                    return "'" + code + "'";
                  };
                default:
                  return function(code) {
                    return code;
                  };
              }
            };
            return async.each(options.testExts, (function(_ext, _next) {
              var destPath, filePath, fileRelPath, _compile;
              fileRelPath = pathname.replace(options.grepExts, _ext);
              filePath = path.join(options.src, fileRelPath);
              destPath = "" + options.tmp + "/" + lang + fileRelPath;
              _compile = function() {
                return fs.readFile(filePath, 'utf8', function(err, content) {
                  if (err != null) {
                    return _next();
                  }
                  content = content.replace(options.pattern || /$^/, function(m, code) {
                    var result;
                    result = i18n.__({
                      phrase: code,
                      locale: lang
                    });
                    if (result) {
                      return _decorator(_ext)(result);
                    } else {
                      return code;
                    }
                  });
                  return mkdirp(path.dirname(destPath), '0755', function(err) {
                    if (err != null) {
                      return _next();
                    }
                    return fs.writeFile(destPath, content, 'utf8', _next);
                  });
                });
              };
              if (options.force) {
                return _compile();
              }
              return fs.stat(filePath, function(err, srcStat) {
                if (err != null) {
                  return _next();
                }
                return fs.stat(destPath, function(err, destStat) {
                  if (err) {
                    if (err.code === 'ENOENT') {
                      return _compile();
                    } else {
                      return _next();
                    }
                  } else {
                    if (srcStat.mtime > destStat.mtime) {
                      return _compile();
                    } else {
                      return _next();
                    }
                  }
                });
              });
            }), function(err) {
              return next();
            });
          } else {
            return next();
          }
        });
      };
      return _middleware;
    };

    return I18nMiddleware;

  })();

  i18nMiddleware = function(options) {
    var middleware;
    this.version = '0.0.1';
    middleware = new I18nMiddleware(options);
    this.options = middleware.options;
    return middleware.middleware();
  };

  module.exports = i18nMiddleware;

}).call(this);
